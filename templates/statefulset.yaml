apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "apache-nifi.fullname" . }}
  labels:
    app: {{ include "apache-nifi.name" . | quote }}
    role: frontend
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  podManagementPolicy: {{ .Values.sts.podManagementPolicy }}
  serviceName: {{ template "apache-nifi.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      annotations:
        security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
      labels:
        app: {{ include "apache-nifi.name" . | quote }}
        role: frontend
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
    spec:
      {{- if eq .Values.sts.AntiAffinity "hard"}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ include "apache-nifi.name" . | quote }}
              topologyKey: "kubernetes.io/hostname"
      {{- else if eq .Values.sts.AntiAffinity "soft"}}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "component"
                        operator: In
                        values:
                         - {{ include "apache-nifi.name" . | quote }}
                 topologyKey: "kubernetes.io/hostname"
      {{- end}}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
      - name: zookeeper
        image: busybox
        command:
        - sh
        - -c
        - |
          until nc -vzw 1 {{ .Release.Name }}-zookeeper 2181; do
            echo "waiting for zookeeper..."
            sleep 2
          done
{{- if .Values.ca.enabled }}
      - name: cert
        imagePullPolicy: {{ .Values.ca.image.pullPolicy | quote }}
        image: "{{ .Values.ca.image.repository }}:{{ .Values.ca.image.tag }}"
        command:
        - bash
        - -c
        - |

          CA_ADDRESS="{{ template "apache-nifi.fullname" . }}-ca:{{ .Values.ca.port }}"
          until echo "" | timeout -t 2 openssl s_client -connect "${CA_ADDRESS}"; do
            echo "Waiting for CA to be avaiable at ${CA_ADDRESS}"
            sleep 2
          done;

          mkdir -p /data/cert
          cd /data/cert

          rm -rf /data/cert/*

          ${NIFI_TOOLKIT_HOME}/bin/tls-toolkit.sh client\
            -c "{{ template "apache-nifi.fullname" . }}-ca"\
            -t "$(cat /etc/ca-mitm-token/token)"\
{{- if .Values.properties.webProxyHost}}
            --subjectAlternativeNames {{.Values.properties.webProxyHost}}\
{{- end }}
            -D "CN=$(hostname -f),OU=NIFI"\
            -p {{ .Values.ca.port }}

          # generate admin cert for operational use cases
          mkdir -p /data/cert/admin
          cd /data/cert/admin

          ${NIFI_TOOLKIT_HOME}/bin/tls-toolkit.sh client\
            -c "{{ template "apache-nifi.fullname" . }}-ca"\
            -t "$(cat /etc/ca-mitm-token/token)"\
{{- if .Values.properties.webProxyHost}}
            --subjectAlternativeNames {{.Values.properties.webProxyHost}}\
{{- end }}
            -p {{ .Values.ca.port }}\
            -D "CN={{ .Values.ca.admin.cn }},OU=NIFI"\
            -T PKCS12

          export PASS=$(jq -r .keyStorePassword config.json)

          openssl pkcs12 -in "keystore.pkcs12" -out "key.pem" -nocerts -nodes -password "env:PASS"
          openssl pkcs12 -in "keystore.pkcs12" -out "crt.pem" -clcerts -nokeys -password "env:PASS"
        volumeMounts:
          - name: "data"
            mountPath: /data
          - name: ca-mitm-token
            mountPath: /etc/ca-mitm-token
{{- end }}
      containers:
      - name: server
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
{{- if .Values.properties.httpsPort }}
        - containerPort: {{ .Values.properties.httpsPort }}
{{- if .Values.sts.hostPort }}
          hostPort: {{ .Values.sts.hostPort }}
{{- end }}
          name: https
          protocol: TCP
{{- end }}
{{- if .Values.properties.httpPort }}
        - containerPort: {{ .Values.properties.httpPort }}
          name: http
          protocol: TCP
{{- end }}
        - containerPort: {{ .Values.properties.clusterPort }}
          name: cluster
          protocol: TCP
{{ include "nifi-env" . | indent 8 }}
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -c
              - |
                $NIFI_HOME/bin/nifi.sh stop
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          exec:
            command:
            - "../scripts/readiness-check.sh"
        livenessProbe:
          initialDelaySeconds: 90
          periodSeconds: 30
          tcpSocket:
{{- if .Values.properties.httpsPort }}
            port: {{ .Values.properties.httpsPort }}
{{- else }}
            port: {{ .Values.properties.httpPort }}
{{- end }}
{{ include "volume-mounts" . | indent 8 }}
      - name: app-log
        image: {{ .Values.sidecar.image }}
        args: [tail, -n+1, -F, /var/log/nifi-app.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: logs
          mountPath: /var/log
      - name: bootstrap-log
        image: {{ .Values.sidecar.image }}
        args: [tail, -n+1, -F, /var/log/nifi-bootstrap.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: logs
          mountPath: /var/log
      - name: user-log
        image: {{ .Values.sidecar.image }}
        args: [tail, -n+1, -F, /var/log/nifi-user.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: logs
          mountPath: /var/log
{{ include "nifi-volumes" . | indent 6 }}
{{ include "nifi-pvc-templates" . | indent 2 }}
