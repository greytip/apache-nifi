apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "apache-nifi.fullname" . }}
  labels:
    app: {{ include "apache-nifi.name" . | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  podManagementPolicy: {{ .Values.sts.podManagementPolicy }}
  serviceName: {{ template "apache-nifi.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      annotations:
        security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
      labels:
        app: {{ include "apache-nifi.name" . | quote }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
    spec:
      {{- if eq .Values.sts.AntiAffinity "hard"}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - {{ include "apache-nifi.name" . | quote }}
              topologyKey: "kubernetes.io/hostname"
      {{- else if eq .Values.sts.AntiAffinity "soft"}}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "component"
                        operator: In
                        values:
                         - {{ include "apache-nifi.name" . | quote }}
                 topologyKey: "kubernetes.io/hostname"
      {{- end}}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
      - name: zookeeper
        image: busybox
        command:
        - sh
        - -c
        - |
          until nc -vzw 1 {{ .Release.Name }}-zookeeper 2181; do
            echo "waiting for zookeeper..."
            sleep 2
          done
{{- if .Values.ca.enabled }}
      - name: cert
        imagePullPolicy: {{ .Values.ca.image.pullPolicy | quote }}
        image: "{{ .Values.ca.image.repository }}:{{ .Values.ca.image.tag }}"
        command:
        - bash
        - -c
        - |

          CA_ADDRESS="{{ template "apache-nifi.fullname" . }}-ca:{{ .Values.ca.port }}"
          until echo "" | timeout -t 2 openssl s_client -connect "${CA_ADDRESS}"; do
            echo "Waiting for CA to be avaiable at ${CA_ADDRESS}"
            sleep 2
          done;

          mkdir -p /data/cert
          cd /data/cert

          rm -rf /data/cert/*

          ${NIFI_TOOLKIT_HOME}/bin/tls-toolkit.sh client\
            -c "{{ template "apache-nifi.fullname" . }}-ca"\
            -t "$(cat /etc/ca-mitm-token/token)"\
{{- if .Values.properties.webProxyHost}}
            --subjectAlternativeNames {{.Values.properties.webProxyHost}}\
{{- end }}
            -D "CN=$(hostname -f),OU=NIFI"\
            -p {{ .Values.ca.port }}

          # generate admin cert for operational use cases
          mkdir -p /data/cert/admin
          cd /data/cert/admin

          ${NIFI_TOOLKIT_HOME}/bin/tls-toolkit.sh client\
            -c "{{ template "apache-nifi.fullname" . }}-ca"\
            -t "$(cat /etc/ca-mitm-token/token)"\
{{- if .Values.properties.webProxyHost}}
            --subjectAlternativeNames {{.Values.properties.webProxyHost}}\
{{- end }}
            -p {{ .Values.ca.port }}\
            -D "CN={{ .Values.ca.admin.cn }},OU=NIFI"\
            -T PKCS12

          export PASS=$(jq -r .keyStorePassword config.json)

          openssl pkcs12 -in "keystore.pkcs12" -out "key.pem" -nocerts -nodes -password "env:PASS"
          openssl pkcs12 -in "keystore.pkcs12" -out "crt.pem" -clcerts -nokeys -password "env:PASS"
        volumeMounts:
          - name: "data"
            mountPath: /data
          - name: ca-mitm-token
            mountPath: /etc/ca-mitm-token
{{- end }}
      containers:
      - name: server
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        resources:
{{ toYaml .Values.resources | indent 10 }}
        ports:
{{- if .Values.properties.httpsPort }}
        - containerPort: {{ .Values.properties.httpsPort }}
{{- if .Values.sts.hostPort }}
          hostPort: {{ .Values.sts.hostPort }}
{{- end }}
          name: https
          protocol: TCP
{{- end }}
{{- if .Values.properties.httpPort }}
        - containerPort: {{ .Values.properties.httpPort }}
          name: http
          protocol: TCP
{{- end }}
        - containerPort: {{ .Values.properties.clusterPort }}
          name: cluster
          protocol: TCP
        env:
        - name: AUTH
          value: {{ .Values.properties.auth | quote }}
        - name: INITIAL_ADMIN_IDENTITY
          value: "CN={{ .Values.ca.admin.cn }},OU=NIFI"
        - name: NIFI_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.properties.secretsFile }}-secrets
              key: secret_key
        - name: KEYSTORE_PASSWORD2
          valueFrom:
            secretKeyRef:
              name: {{ .Values.properties.secretsFile }}-secrets
              key: keystore_password
        - name: TRUSTSTORE_PASSWORD2
          valueFrom:
            secretKeyRef:
              name: {{ .Values.properties.secretsFile }}-secrets
              key: truststore_password
        - name: KEYSTORE_TYPE
          value: JKS
        - name: TRUSTSTORE_TYPE
          value: JKS
        - name: NIFI_ZK_CONNECT_STRING
          value: {{ template "zookeeper.url" . }}
        - name: NIFI_SERVICE_NAME
          value: {{ template "apache-nifi.fullname" . }}-headless
        - name: NIFI_CLUSTER_IS_NODE
          value: "{{.Values.properties.isNode}}"
        - name: NIFI_CLUSTER_NODE_PROTOCOL_PORT
          value: "{{.Values.properties.clusterPort}}"
        - name: NIFI_CLUSTER_NODE_PROTOCOL_THREADS
          value: "10"
        - name: NIFI_CLUSTER_NODE_PROTOCOL_MAX_THREADS
          value: "50"
        - name: NIFI_ELECTION_MAX_CANDIDATES
          value: "2"
        - name: NIFI_PROVENANCE_STORAGE
          value: "{{ .Values.properties.provenanceStorage }}"
        - name: NIFI_STS_SECURE
          value: "{{ .Values.properties.siteToSite.secure }}"
        - name: NIFI_STS_INPUT_PORT
          value: "{{ .Values.properties.siteToSite.port }}"
        - name: NIFI_WEB_PROXY_HOST
          value: "{{ .Values.properties.webProxyHost }}"
        - name: LDAP_AUTHENTICATION_STRATEGY
          value: "{{ .Values.ldap.authStrategy }}"
        - name: LDAP_USER_SEARCH_BASE
          value: "{{ .Values.ldap.searchBase }}"
        - name: LDAP_USER_SEARCH_FILTER
          value: "{{ .Values.ldap.searchFilter }}"
        - name: LDAP_IDENTITY_STRATEGY
          value: "{{ .Values.ldap.idStrategy }}"
        - name: LDAP_URL
          value: "{{ .Values.ldap.url }}"
        - name: LDAP_MANAGER_DN
          value: "{{ .Values.ldap.managerDn }}"
        - name: LDAP_MANAGER_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: {{ .Values.properties.secretsFile }}-secrets
              key: ldap_password
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -c
              - |
                $NIFI_HOME/bin/nifi.sh stop
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          exec:
            command:
            - bash
            - -c
            - |
{{- if .Values.properties.httpsPort }}
              curl -kv \
                --cert ${NIFI_BASE_DIR}/data/cert/admin/crt.pem --cert-type PEM \
                --key ${NIFI_BASE_DIR}/data/cert/admin/key.pem --key-type PEM \
                https://$(hostname -f):8443/nifi-api/controller/cluster > $NIFI_BASE_DIR/data/cluster.state
{{- else }}
              curl -kv \
                http://$(hostname -f):{{ .Values.properties.httpPort }}/nifi-api/controller/cluster > $NIFI_BASE_DIR/data/cluster.state

{{- end }}
              STATUS=$(cat $NIFI_BASE_DIR/data/cluster.state | jq -r ".cluster.nodes[] | select(.address==\"$(hostname -f)\") | .status")

              if [[ ! $STATUS = "CONNECTED" ]]; then
                echo "Node not found with CONNECTED state. Full cluster state:"
                jq . cluster.state
                exit 1
              fi
        livenessProbe:
          initialDelaySeconds: 90
          periodSeconds: 30
          tcpSocket:
{{- if .Values.properties.httpsPort }}
            port: {{ .Values.properties.httpsPort }}
{{- else }}
            port: {{ .Values.properties.httpPort }}
{{- end }}
        volumeMounts:
          - name: "data"
            mountPath: /opt/nifi/data
          - name: "flowfile-repository"
            mountPath: /opt/nifi/flowfile_repository
          - name: "content-repository"
            mountPath: /opt/nifi/content_repository
          - name: "provenance-repository"
            mountPath: /opt/nifi/provenance_repository
          - name: "logs"
            mountPath: /opt/nifi/nifi-current/logs
          - name: "bootstrap-conf"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap.conf
            subPath: "bootstrap.conf"
          - name: "nifi-properties"
            mountPath: /opt/nifi/nifi-current/conf/nifi.temp
            subPath: "nifi.temp"
          - name: "authorizers-temp"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.temp
            subPath: "authorizers.temp"
          - name: "authorizers-empty"
            mountPath: /opt/nifi/nifi-current/conf/authorizers.empty
            subPath: "authorizers.empty"
          - name: "bootstrap-notification-services-xml"
            mountPath: /opt/nifi/nifi-current/conf/bootstrap-notification-services.xml
            subPath: "bootstrap-notification-services.xml"
          - name: "logback-xml"
            mountPath: /opt/nifi/nifi-current/conf/logback.temp
            subPath: "logback.temp"
          - name: "login-identity-providers-xml"
            mountPath: /opt/nifi/nifi-current/conf/login-identity-providers.temp
            subPath: "login-identity-providers.temp"
          - name: "state-management-xml"
            mountPath: /opt/nifi/nifi-current/conf/state-management.temp
            subPath: "state-management.temp"
          - name: "zookeeper-properties"
            mountPath: /opt/nifi/nifi-current/conf/zookeeper.properties
            subPath: "zookeeper.properties"
      - name: app-log
        image: {{ .Values.sidecar.image }}
        args: [tail, -n+1, -F, /var/log/nifi-app.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: logs
          mountPath: /var/log
      - name: bootstrap-log
        image: {{ .Values.sidecar.image }}
        args: [tail, -n+1, -F, /var/log/nifi-bootstrap.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: logs
          mountPath: /var/log
      - name: user-log
        image: {{ .Values.sidecar.image }}
        args: [tail, -n+1, -F, /var/log/nifi-user.log]
        resources:
{{ toYaml .Values.logresources | indent 10 }}
        volumeMounts:
        - name: logs
          mountPath: /var/log
      volumes:
      - name: "bootstrap-conf"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap.conf"
              path: "bootstrap.conf"
      - name: "nifi-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "nifi.properties"
              path: "nifi.temp"
      - name: "authorizers-temp"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "authorizers.xml"
              path: "authorizers.temp"
      - name: "authorizers-empty"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "authorizers-empty.xml"
              path: "authorizers.empty"
      - name: "bootstrap-notification-services-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "bootstrap-notification-services.xml"
              path: "bootstrap-notification-services.xml"
      - name: "logback-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "logback.xml"
              path: "logback.temp"
      - name: "login-identity-providers-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "login-identity-providers.xml"
              path: "login-identity-providers.temp"
      - name: "state-management-xml"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "state-management.xml"
              path: "state-management.temp"
      - name: "zookeeper-properties"
        configMap:
          name: {{ template "apache-nifi.fullname" . }}-config
          items:
            - key: "zookeeper.properties"
              path: "zookeeper.properties"
      - name: ca-mitm-token
        secret:
          secretName: {{ template "apache-nifi.fullname" . }}-ca-mitm-token
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.dataStorage }}
    - metadata:
        name: "flowfile-repository"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.flowfileRepoStorage }}
    - metadata:
        name: "content-repository"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.contentRepoStorage }}
    - metadata:
        name: "provenance-repository"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.provenanceRepoStorage }}
    - metadata:
        name: "logs"
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.logStorage }}
